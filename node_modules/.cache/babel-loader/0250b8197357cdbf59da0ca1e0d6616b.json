{"ast":null,"code":"import * as React from 'react';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport useOptionsGetters from './useOptionsGetters';\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\n\nexport default function SceneView(_ref) {\n  let {\n    screen,\n    route,\n    navigation,\n    routeState,\n    getState,\n    setState,\n    options,\n    clearOptions\n  } = _ref;\n  const navigatorKeyRef = React.useRef();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n  const {\n    addOptionsGetter\n  } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation\n  });\n  const setKey = React.useCallback(key => {\n    navigatorKeyRef.current = key;\n  }, []);\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find(r => r.key === route.key);\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n  const setCurrentState = React.useCallback(child => {\n    const state = getState();\n    setState({ ...state,\n      routes: state.routes.map(r => r.key === route.key ? { ...r,\n        state: child\n      } : r)\n    });\n  }, [getState, route.key, setState]);\n  const isInitialRef = React.useRef(true);\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  }); // Clear options set by this screen when it is unmounted\n\n  React.useEffect(() => {\n    return clearOptions; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n  const context = React.useMemo(() => ({\n    state: routeState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    getKey,\n    setKey,\n    getIsInitial,\n    addOptionsGetter\n  }), [routeState, getCurrentState, setCurrentState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  const ScreenComponent = screen.getComponent ? screen.getComponent() : screen.component;\n  return /*#__PURE__*/React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(EnsureSingleNavigator, null, /*#__PURE__*/React.createElement(StaticContainer, {\n    name: screen.name,\n    render: ScreenComponent || screen.children,\n    navigation: navigation,\n    route: route\n  }, ScreenComponent !== undefined ? /*#__PURE__*/React.createElement(ScreenComponent, {\n    navigation: navigation,\n    route: route\n  }) : screen.children !== undefined ? screen.children({\n    navigation,\n    route\n  }) : null)));\n}","map":{"version":3,"mappings":"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","names":["React","EnsureSingleNavigator","NavigationStateContext","StaticContainer","useOptionsGetters","SceneView","screen","route","navigation","routeState","getState","setState","options","clearOptions","_ref","navigatorKeyRef","useRef","getKey","useCallback","current","addOptionsGetter","key","setKey","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","map","isInitialRef","useEffect","getIsInitial","context","useMemo","ScreenComponent","getComponent","component","Provider","value","name","render","children"],"sources":["/Users/suporte/PetCare/Telas/TCCPetcare/node_modules/@react-navigation/core/lib/module/SceneView.tsx"],"sourcesContent":["import type {\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport type { NavigationProp, RouteConfigComponent } from './types';\nimport useOptionsGetters from './useOptionsGetters';\n\ntype Props<State extends NavigationState, ScreenOptions extends {}> = {\n  screen: RouteConfigComponent<ParamListBase, string> & { name: string };\n  navigation: NavigationProp<\n    ParamListBase,\n    string,\n    string | undefined,\n    State,\n    ScreenOptions\n  >;\n  route: Route<string>;\n  routeState: NavigationState | PartialState<NavigationState> | undefined;\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n  clearOptions: () => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  screen,\n  route,\n  navigation,\n  routeState,\n  getState,\n  setState,\n  options,\n  clearOptions,\n}: Props<State, ScreenOptions>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  // Clear options set by this screen when it is unmounted\n  React.useEffect(() => {\n    return clearOptions;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const context = React.useMemo(\n    () => ({\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      routeState,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          render={ScreenComponent || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {ScreenComponent !== undefined ? (\n            <ScreenComponent navigation={navigation} route={route} />\n          ) : screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}