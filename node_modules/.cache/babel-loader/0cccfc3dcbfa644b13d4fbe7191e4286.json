{"ast":null,"code":"import { findFocusedRoute, getActionFromState as getActionFromStateDefault, getPathFromState as getPathFromStateDefault, getStateFromPath as getStateFromPathDefault } from '@react-navigation/core';\nimport isEqual from 'fast-deep-equal';\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport ServerContext from './ServerContext';\n\nconst createMemoryHistory = () => {\n  let index = 0;\n  let items = []; // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n\n  const pending = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach(it => {\n      const cb = it.cb;\n\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index() {\n      var _window$history$state; // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n\n\n      const id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n\n      if (id) {\n        const index = items.findIndex(item => item.id === id);\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index) {\n      return items[index];\n    },\n\n    backIndex(_ref) {\n      let {\n        path\n      } = _ref; // We need to find the index from the element before current to get closest path to go back to\n\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push(_ref2) {\n      let {\n        path,\n        state\n      } = _ref2;\n      interrupt();\n      const id = nanoid(); // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n\n      items = items.slice(0, index + 1);\n      items.push({\n        path,\n        state,\n        id\n      });\n      index = items.length - 1; // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n\n      window.history.pushState({\n        id\n      }, '', path);\n    },\n\n    replace(_ref3) {\n      var _window$history$state2, _window$history$state3;\n\n      let {\n        path,\n        state\n      } = _ref3;\n      interrupt();\n      const id = (_window$history$state2 = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id) !== null && _window$history$state2 !== void 0 ? _window$history$state2 : nanoid();\n\n      if (!items.length || items.findIndex(item => item.id === id) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n        items = [{\n          path,\n          state,\n          id\n        }];\n        index = 0;\n      } else {\n        items[index] = {\n          path,\n          state,\n          id\n        };\n      }\n\n      window.history.replaceState({\n        id\n      }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n) {\n      interrupt();\n\n      if (n === 0) {\n        return;\n      } // We shouldn't go back more than the 0 index (otherwise we'll exit the page)\n      // Or forward more than the available index (or the app will crash)\n\n\n      index = n < 0 ? Math.max(index - n, 0) : Math.min(index + n, items.length - 1); // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n\n      return new Promise((resolve, reject) => {\n        const done = interrupted => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          } // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n\n\n          const {\n            title\n          } = window.document;\n          window.document.title = '';\n          window.document.title = title;\n          resolve();\n        };\n\n        pending.push({\n          ref: done,\n          cb: done\n        }); // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n\n        const timer = setTimeout(() => {\n          const index = pending.findIndex(it => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          var _window$history$state4;\n\n          const id = (_window$history$state4 = window.history.state) === null || _window$history$state4 === void 0 ? void 0 : _window$history$state4.id;\n          const currentIndex = items.findIndex(item => item.id === id); // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n\n          index = Math.max(currentIndex, 0);\n          const last = pending.pop();\n          window.removeEventListener('popstate', onPopState);\n          last === null || last === void 0 ? void 0 : last.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n      return () => window.removeEventListener('popstate', onPopState);\n    }\n\n  };\n  return history;\n};\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\n\n\nconst findMatchingState = (a, b) => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  } // Tab and drawer will have `history` property, but stack will have history in `routes`\n\n\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n  const aChildState = aRoute.state;\n  const bChildState = bRoute.state; // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n/**\n * Run async function in series as it's called.\n */\n\n\nconst series = cb => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n        last === null || last === void 0 ? void 0 : last();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet linkingHandlers = [];\nexport default function useLinking(ref, _ref4) {\n  let {\n    independent,\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault\n  } = _ref4;\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n  const [history] = React.useState(createMemoryHistory); // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  const server = React.useContext(ServerContext);\n  const getInitialState = React.useCallback(() => {\n    let value;\n\n    if (enabledRef.current) {\n      var _server$location;\n\n      const location = (_server$location = server === null || server === void 0 ? void 0 : server.location) !== null && _server$location !== void 0 ? _server$location : typeof window !== 'undefined' ? window.location : undefined;\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n\n      catch() {\n        return thenable;\n      }\n\n    };\n    return thenable; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const previousIndexRef = React.useRef(undefined);\n  const previousStateRef = React.useRef(undefined);\n  const pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n    return history.listen(() => {\n      var _previousIndexRef$cur;\n\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n      const previousIndex = (_previousIndexRef$cur = previousIndexRef.current) !== null && _previousIndexRef$cur !== void 0 ? _previousIndexRef$cur : 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path; // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n\n      const record = history.get(index);\n\n      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current); // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some(r => !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name)))) {\n          console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(state, configRef.current);\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(`An error occurred when trying to handle the link '${path}': ${typeof e === 'object' && e != null && 'message' in e ? // @ts-expect-error: we're already checking for this\n              e.message : e}`);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(() => {\n    var _ref$current;\n\n    if (!enabled) {\n      return;\n    }\n\n    const getPathForRoute = (route, state) => {\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n      // This makes sure that we preserve the original URL for wildcard routes\n      if (route !== null && route !== void 0 && route.path) {\n        const stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n\n        if (stateForPath) {\n          const focusedRoute = findFocusedRoute(stateForPath);\n\n          if (focusedRoute && focusedRoute.name === route.name && isEqual(focusedRoute.params, route.params)) {\n            return route.path;\n          }\n        }\n      }\n\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({\n          path,\n          state\n        });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState(); // root state may not available, for example when root navigators switch inside the container\n\n      if (!state) {\n        return;\n      }\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = getPathForRoute(route, state);\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined; // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n\n      const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n\n      if (previousFocusedState && focusedState && // We should only handle push/pop if path changed from what was in last `popstate`\n      // Otherwise it's likely a change triggered by `popstate`\n      path !== pendingPath) {\n        const historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({\n            path,\n            state\n          });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n          const nextIndex = history.backIndex({\n            path\n          });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            } // Store the updated state as well as fix the path if incorrect\n\n\n            history.replace({\n              path,\n              state\n            });\n          } catch (e) {// The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({\n            path,\n            state\n          });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({\n          path,\n          state\n        });\n      }\n    }; // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n\n\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  });\n  return {\n    getInitialState\n  };\n}","map":{"version":3,"mappings":"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","names":["findFocusedRoute","getActionFromState","getActionFromStateDefault","getPathFromState","getPathFromStateDefault","getStateFromPath","getStateFromPathDefault","isEqual","nanoid","React","ServerContext","createMemoryHistory","index","items","pending","interrupt","forEach","it","cb","history","id","window","state","_window$history$state","findIndex","item","get","backIndex","path","_ref","i","push","_ref2","slice","length","pushState","replace","_ref3","_window$history$state3","replaceState","go","n","Math","max","min","Promise","resolve","reject","done","interrupted","clearTimeout","timer","Error","title","document","ref","setTimeout","splice","onPopState","_window$history$state4","currentIndex","last","pop","removeEventListener","addEventListener","listen","listener","findMatchingState","a","b","undefined","key","aHistoryLength","routes","bHistoryLength","aRoute","bRoute","aChildState","bChildState","series","handling","queue","callback","unshift","linkingHandlers","useLinking","independent","enabled","config","_ref4","useEffect","process","env","NODE_ENV","console","error","join","trim","handler","Symbol","indexOf","useState","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","current","server","useContext","getInitialState","useCallback","value","location","pathname","search","thenable","then","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","navigation","previousIndex","record","resetRoot","rootState","getRootState","some","r","routeNames","includes","name","warn","action","dispatch","e","message","getPathForRoute","route","stateForPath","focusedRoute","params","onStateChange","previousState","pendingPath","previousFocusedState","focusedState","historyDelta","nextIndex","_ref$current","addListener"],"sources":["/Users/suporte/PetCare/Telas/TCCPetcare/node_modules/@react-navigation/native/lib/module/useLinking.tsx"],"sourcesContent":["import {\n  findFocusedRoute,\n  getActionFromState as getActionFromStateDefault,\n  getPathFromState as getPathFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n  NavigationState,\n  ParamListBase,\n} from '@react-navigation/core';\nimport isEqual from 'fast-deep-equal';\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\n\nimport ServerContext from './ServerContext';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nconst createMemoryHistory = () => {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach((it) => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index];\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = window.history.state?.id ?? nanoid();\n\n      if (!items.length || items.findIndex((item) => item.id === id) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n        items = [{ path, state, id }];\n        index = 0;\n      } else {\n        items[index] = { path, state, id };\n      }\n\n      window.history.replaceState({ id }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      interrupt();\n\n      if (n === 0) {\n        return;\n      }\n\n      // We shouldn't go back more than the 0 index (otherwise we'll exit the page)\n      // Or forward more than the available index (or the app will crash)\n      index =\n        n < 0 ? Math.max(index - n, 0) : Math.min(index + n, items.length - 1);\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise<void>((resolve, reject) => {\n        const done = (interrupted?: boolean) => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const { title } = window.document;\n\n          window.document.title = '';\n          window.document.title = title;\n\n          resolve();\n        };\n\n        pending.push({ ref: done, cb: done });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const index = pending.findIndex((it) => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          const id = window.history.state?.id;\n          const currentIndex = items.findIndex((item) => item.id === id);\n\n          // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n          index = Math.max(currentIndex, 0);\n\n          const last = pending.pop();\n\n          window.removeEventListener('popstate', onPopState);\n          last?.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n};\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = (cb: () => Promise<void>) => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue: (() => Promise<void>)[] = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n\n        last?.();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet linkingHandlers: Symbol[] = [];\n\ntype Options = LinkingOptions<ParamListBase> & {\n  independent?: boolean;\n};\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    independent,\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options\n) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(\n            state,\n            configRef.current\n          );\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${\n                  typeof e === 'object' && e != null && 'message' in e\n                    ? // @ts-expect-error: we're already checking for this\n                      e.message\n                    : e\n                }`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const getPathForRoute = (\n      route: ReturnType<typeof findFocusedRoute>,\n      state: NavigationState\n    ): string => {\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n      // This makes sure that we preserve the original URL for wildcard routes\n      if (route?.path) {\n        const stateForPath = getStateFromPathRef.current(\n          route.path,\n          configRef.current\n        );\n\n        if (stateForPath) {\n          const focusedRoute = findFocusedRoute(stateForPath);\n\n          if (\n            focusedRoute &&\n            focusedRoute.name === route.name &&\n            isEqual(focusedRoute.params, route.params)\n          ) {\n            return route.path;\n          }\n        }\n      }\n\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      // root state may not available, for example when root navigators switch inside the container\n      if (!state) {\n        return;\n      }\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = getPathForRoute(route, state);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}