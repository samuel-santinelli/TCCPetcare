{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from './TabRouter';\nexport const DrawerActions = { ...TabActions,\n\n  openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n\n  closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n\n  toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n\n};\nexport default function DrawerRouter(_ref) {\n  let {\n    defaultStatus = 'closed',\n    ...rest\n  } = _ref;\n  const router = TabRouter(rest);\n\n  const isDrawerInHistory = state => {\n    var _state$history;\n\n    return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(it => it.type === 'drawer'));\n  };\n\n  const addDrawerToHistory = state => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return { ...state,\n      history: [...state.history, {\n        type: 'drawer',\n        status: defaultStatus === 'open' ? 'closed' : 'open'\n      }]\n    };\n  };\n\n  const removeDrawerFromHistory = state => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return { ...state,\n      history: state.history.filter(it => it.type !== 'drawer')\n    };\n  };\n\n  const openDrawer = state => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = state => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return { ...router,\n    type: 'drawer',\n\n    getInitialState(_ref2) {\n      let {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      } = _ref2;\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      });\n      return { ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`\n      };\n    },\n\n    getRehydratedState(partialState, _ref3) {\n      let {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      } = _ref3;\n\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return { ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            const result = router.getStateForAction(state, action, options);\n\n            if (result != null && result.index !== state.index) {\n              return closeDrawer(result);\n            }\n\n            return result;\n          }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions\n  };\n}","map":{"version":3,"mappings":"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","names":["nanoid","TabRouter","TabActions","DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","DrawerRouter","defaultStatus","rest","router","isDrawerInHistory","state","Boolean","history","_state$history","some","it","addDrawerToHistory","status","removeDrawerFromHistory","filter","getInitialState","routeNames","routeParamList","routeGetIdList","default","stale","key","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","options","index","actionCreators"],"sources":["/Users/suporte/PetCare/Telas/TCCPetcare/node_modules/@react-navigation/routers/lib/module/DrawerRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\nexport type DrawerStatus = 'open' | 'closed';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: DrawerStatus;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * Default status of the drawer.\n   */\n  default: DrawerStatus;\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: DrawerStatus }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nexport default function DrawerRouter({\n  defaultStatus = 'closed',\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  const isDrawerInHistory = (\n    state:\n      | DrawerNavigationState<ParamListBase>\n      | PartialState<DrawerNavigationState<ParamListBase>>\n  ) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\n  const addDrawerToHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: [\n        ...state.history,\n        {\n          type: 'drawer',\n          status: defaultStatus === 'open' ? 'closed' : 'open',\n        },\n      ],\n    };\n  };\n\n  const removeDrawerFromHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: state.history.filter((it) => it.type !== 'drawer'),\n    };\n  };\n\n  const openDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      return {\n        ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return {\n        ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          const result = router.getStateForAction(state, action, options);\n\n          if (result != null && result.index !== state.index) {\n            return closeDrawer(result as DrawerNavigationState<ParamListBase>);\n          }\n\n          return result;\n        }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}