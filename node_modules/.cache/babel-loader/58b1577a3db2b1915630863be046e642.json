{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nexport default function useComponent(Component, props) {\n  const propsRef = React.useRef(props); // Normally refs shouldn't be mutated in render\n  // But we return a component which will be rendered\n  // So it's just for immediate consumption\n\n  propsRef.current = props;\n  React.useEffect(() => {\n    propsRef.current = null;\n  });\n  return React.useRef(rest => {\n    const props = propsRef.current;\n\n    if (props === null) {\n      throw new Error('The returned component must be rendered in the same render phase as the hook.');\n    } // @ts-expect-error: the props should be fine here\n\n\n    return /*#__PURE__*/React.createElement(Component, _extends({}, props, rest));\n  }).current;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,eAAe,SAASC,YAAT,CAGbC,SAHa,EAGCC,KAHD,EAGW;AACxB,QAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAANL,CAAuBG,KAAvBH,CAAjB,CADwB,CAGxB;AACA;AACA;;AACAI,UAAQ,CAACE,OAATF,GAAmBD,KAAnBC;AAEAJ,OAAK,CAACO,SAANP,CAAgB,MAAM;AACpBI,YAAQ,CAACE,OAATF,GAAmB,IAAnBA;AADF;AAIA,SAAOJ,KAAK,CAACK,MAANL,CAAcQ,IAAD,IAAkD;AACpE,UAAML,KAAK,GAAGC,QAAQ,CAACE,OAAvB;;AAEA,QAAIH,KAAK,KAAK,IAAd,EAAoB;AAClB,YAAM,IAAIM,KAAJ,CACJ,+EADI,CAAN;AAJkE,MASpE;;;AACA,wBAAOT,oBAACE,SAAD,eAAeC,KAAf,EAA0BK,IAA1B,EAAP;AAVK,KAWJF,OAXH;AAYD","names":["React","useComponent","Component","props","propsRef","useRef","current","useEffect","rest","Error"],"sources":["/Users/suporte/PetCare/Telas/TCCPetcare/node_modules/@react-navigation/core/lib/module/useComponent.tsx"],"sourcesContent":["import * as React from 'react';\n\nexport default function useComponent<\n  T extends React.ComponentType<any>,\n  P extends {}\n>(Component: T, props: P) {\n  const propsRef = React.useRef<P | null>(props);\n\n  // Normally refs shouldn't be mutated in render\n  // But we return a component which will be rendered\n  // So it's just for immediate consumption\n  propsRef.current = props;\n\n  React.useEffect(() => {\n    propsRef.current = null;\n  });\n\n  return React.useRef((rest: Omit<React.ComponentProps<T>, keyof P>) => {\n    const props = propsRef.current;\n\n    if (props === null) {\n      throw new Error(\n        'The returned component must be rendered in the same render phase as the hook.'\n      );\n    }\n\n    // @ts-expect-error: the props should be fine here\n    return <Component {...props} {...rest} />;\n  }).current;\n}\n"]},"metadata":{},"sourceType":"module"}