{"ast":null,"code":"import { getPathFromState, NavigationContainerRefContext, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport LinkingContext from './LinkingContext';\nimport useLinkTo from './useLinkTo';\n\nconst getStateFromParams = params => {\n  if (params !== null && params !== void 0 && params.state) {\n    return params.state;\n  }\n\n  if (params !== null && params !== void 0 && params.screen) {\n    return {\n      routes: [{\n        name: params.screen,\n        params: params.params,\n        // @ts-expect-error\n        state: params.screen ? getStateFromParams(params.params) : undefined\n      }]\n    };\n  }\n\n  return undefined;\n};\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\n\n\nexport default function useLinkProps(_ref) {\n  var _options$getPathFromS;\n\n  let {\n    to,\n    action\n  } = _ref;\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const {\n    options\n  } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo();\n\n  const onPress = e => {\n    var _e$currentTarget;\n\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented && // onPress prevented default\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && ( // ignore clicks with modifier keys\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    e.button == null || e.button === 0) && // ignore everything but left clicks\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = (_options$getPathFromS = options === null || options === void 0 ? void 0 : options.getPathFromState) !== null && _options$getPathFromS !== void 0 ? _options$getPathFromS : getPathFromState;\n  const href = typeof to === 'string' ? to : getPathFromStateHelper({\n    routes: [{\n      name: to.screen,\n      // @ts-expect-error\n      params: to.params,\n      // @ts-expect-error\n      state: getStateFromParams(to.params)\n    }]\n  }, options === null || options === void 0 ? void 0 : options.config);\n  return {\n    href,\n    accessibilityRole: 'link',\n    onPress\n  };\n}","map":{"version":3,"mappings":"AAAA,SACEA,gBADF,EAGEC,6BAHF,EAIEC,wBAJF,QAOO,wBAPP;AASA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAAgCC,QAAhC,QAAgD,cAAhD;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,SAAP,MAA8B,aAA9B;;AAOA,MAAMC,kBAAkB,GACtBC,MADyB,IAEuC;AAChE,MAAIA,MAAJ,SAAIA,UAAJ,WAAIA,UAAM,CAAEC,KAAZ,EAAmB;AACjB,WAAOD,MAAM,CAACC,KAAd;AACD;;AAED,MAAID,MAAJ,SAAIA,UAAJ,WAAIA,UAAM,CAAEE,MAAZ,EAAoB;AAClB,WAAO;AACLC,YAAM,EAAE,CACN;AACEC,YAAI,EAAEJ,MAAM,CAACE,MADf;AAEEF,cAAM,EAAEA,MAAM,CAACA,MAFjB;AAGE;AACAC,aAAK,EAAED,MAAM,CAACE,MAAPF,GACHD,kBAAkB,CAChBC,MAAM,CAACA,MADS,CADfA,GAMHK;AAVN,OADM;AADH,KAAP;AAgBD;;AAED,SAAOA,SAAP;AA1BF;AA6BA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASC,YAAT,OAEqB;AAAA;;AAAA,MAAlC;AAAEC,MAAF;AAAMC;AAAN,MAAkCC;AAClC,QAAMC,IAAI,GAAGf,KAAK,CAACgB,UAANhB,CAAiBF,6BAAjBE,CAAb;AACA,QAAMiB,UAAU,GAAGjB,KAAK,CAACgB,UAANhB,CAAiBD,wBAAjBC,CAAnB;AACA,QAAM;AAAEkB;AAAF,MAAclB,KAAK,CAACgB,UAANhB,CAAiBE,cAAjBF,CAApB;AACA,QAAMmB,MAAM,GAAGhB,SAAS,EAAxB;;AAEA,QAAMiB,OAAO,GACXC,CADc,IAEX;AAAA;;AACH,QAAIC,YAAY,GAAG,KAAnB;;AAEA,QAAIrB,QAAQ,CAACsB,EAATtB,KAAgB,KAAhBA,IAAyB,CAACoB,CAA9B,EAAiC;AAC/BC,kBAAY,GAAGD,CAAC,GAAG,CAACA,CAAC,CAACG,gBAAN,GAAyB,IAAzCF;AADF,WAEO,IACL,CAACD,CAAC,CAACG,gBAAH,IAAuB;AACvB;AACA,MAAEH,CAAC,CAACI,OAAFJ,IAAaA,CAAC,CAACK,MAAfL,IAAyBA,CAAC,CAACM,OAA3BN,IAAsCA,CAAC,CAACO,QAA1C,CAFA,MAEuD;AACvD;AACCP,KAAC,CAACQ,MAAFR,IAAY,IAAZA,IAAoBA,CAAC,CAACQ,MAAFR,KAAa,CAJlC,KAIwC;AACxC;AACA,KAACX,SAAD,EAAY,IAAZ,EAAkB,EAAlB,EAAsB,MAAtB,EAA8BoB,QAA9B,qBAAuCT,CAAC,CAACU,aAAzC,qDAAuCC,iBAAiBC,MAAxD,CAPK,CAO2D;AAP3D,MAQL;AACAZ,OAAC,CAACa,cAAFb;AACAC,kBAAY,GAAG,IAAfA;AACD;;AAED,QAAIA,YAAJ,EAAkB;AAChB,UAAIT,MAAJ,EAAY;AACV,YAAII,UAAJ,EAAgB;AACdA,oBAAU,CAACkB,QAAXlB,CAAoBJ,MAApBI;AADF,eAEO,IAAIF,IAAJ,EAAU;AACfA,cAAI,CAACoB,QAALpB,CAAcF,MAAdE;AADK,eAEA;AACL,gBAAM,IAAIqB,KAAJ,CACJ,kFADI,CAAN;AAGD;AATH,aAUO;AACLjB,cAAM,CAACP,EAAD,CAANO;AACD;AACF;AAlCH;;AAqCA,QAAMkB,sBAAsB,4BAAGnB,OAAH,SAAGA,WAAH,WAAGA,GAAH,MAAGA,UAAO,CAAErB,gBAAZ,yEAAgCA,gBAA5D;AAEA,QAAMyC,IAAI,GACR,OAAO1B,EAAP,KAAc,QAAd,GACIA,EADJ,GAEIyB,sBAAsB,CACpB;AACE7B,UAAM,EAAE,CACN;AACEC,UAAI,EAAEG,EAAE,CAACL,MADX;AAEE;AACAF,YAAM,EAAEO,EAAE,CAACP,MAHb;AAIE;AACAC,WAAK,EAAEF,kBAAkB,CAACQ,EAAE,CAACP,MAAJ;AAL3B,KADM;AADV,GADoB,EAYpBa,OAZoB,SAYpBA,WAZoB,WAYpBA,GAZoB,MAYpBA,UAAO,CAAEqB,MAZW,CAH5B;AAkBA,SAAO;AACLD,QADK;AAELE,qBAAiB,EAAE,MAFd;AAGLpB;AAHK,GAAP;AAKD","names":["getPathFromState","NavigationContainerRefContext","NavigationHelpersContext","React","Platform","LinkingContext","useLinkTo","getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","to","action","_ref","root","useContext","navigation","options","linkTo","onPress","e","shouldHandle","OS","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","includes","currentTarget","_e$currentTarget","target","preventDefault","dispatch","Error","getPathFromStateHelper","href","config","accessibilityRole"],"sources":["/Users/suporte/PetCare/Telas/TCCPetcare/node_modules/@react-navigation/native/lib/module/useLinkProps.tsx"],"sourcesContent":["import {\n  getPathFromState,\n  NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n  NavigatorScreenParams,\n  ParamListBase,\n} from '@react-navigation/core';\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport LinkingContext from './LinkingContext';\nimport useLinkTo, { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n};\n\nconst getStateFromParams = (\n  params: NavigatorScreenParams<ParamListBase, NavigationState> | undefined\n): PartialState<NavigationState> | NavigationState | undefined => {\n  if (params?.state) {\n    return params.state;\n  }\n\n  if (params?.screen) {\n    return {\n      routes: [\n        {\n          name: params.screen,\n          params: params.params,\n          // @ts-expect-error\n          state: params.screen\n            ? getStateFromParams(\n                params.params as\n                  | NavigatorScreenParams<ParamListBase, NavigationState>\n                  | undefined\n              )\n            : undefined,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps<\n  ParamList extends ReactNavigation.RootParamList\n>({ to, action }: Props<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const { options } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo<ParamList>();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  const href =\n    typeof to === 'string'\n      ? to\n      : getPathFromStateHelper(\n          {\n            routes: [\n              {\n                name: to.screen,\n                // @ts-expect-error\n                params: to.params,\n                // @ts-expect-error\n                state: getStateFromParams(to.params),\n              },\n            ],\n          },\n          options?.config\n        );\n\n  return {\n    href,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}