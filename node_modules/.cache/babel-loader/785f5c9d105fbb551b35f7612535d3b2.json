{"ast":null,"code":"import * as React from 'react';\nimport useNavigation from './useNavigation';\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\n\nexport default function useNavigationState(selector) {\n  const navigation = useNavigation(); // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n\n  const [, setResult] = React.useState(() => selector(navigation.getState())); // We store the selector in a ref to avoid re-subscribing listeners every render\n\n  const selectorRef = React.useRef(selector);\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', e => {\n      setResult(selectorRef.current(e.data.state));\n    });\n    return unsubscribe;\n  }, [navigation]);\n  return selector(navigation.getState());\n}","map":{"version":3,"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,aAAP,MAA0B,iBAA1B;AAMA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,kBAAT,CACbC,QADa,EAEV;AACH,QAAMC,UAAU,GAAGH,aAAa,EAAhC,CADG,CAGH;AACA;;AACA,QAAM,GAAGI,SAAH,IAAgBL,KAAK,CAACM,QAANN,CAAe,MAAMG,QAAQ,CAACC,UAAU,CAACG,QAAXH,EAAD,CAA7BJ,CAAtB,CALG,CAOH;;AACA,QAAMQ,WAAW,GAAGR,KAAK,CAACS,MAANT,CAAaG,QAAbH,CAApB;AAEAA,OAAK,CAACU,SAANV,CAAgB,MAAM;AACpBQ,eAAW,CAACG,OAAZH,GAAsBL,QAAtBK;AADF;AAIAR,OAAK,CAACU,SAANV,CAAgB,MAAM;AACpB,UAAMY,WAAW,GAAGR,UAAU,CAACS,WAAXT,CAAuB,OAAvBA,EAAiCU,CAAD,IAAO;AACzDT,eAAS,CAACG,WAAW,CAACG,OAAZH,CAAoBM,CAAC,CAACC,IAAFD,CAAOE,KAA3BR,CAAD,CAATH;AADkB,MAApB;AAIA,WAAOO,WAAP;AALF,KAMG,CAACR,UAAD,CANHJ;AAQA,SAAOG,QAAQ,CAACC,UAAU,CAACG,QAAXH,EAAD,CAAf;AACD","names":["React","useNavigation","useNavigationState","selector","navigation","setResult","useState","getState","selectorRef","useRef","useEffect","current","unsubscribe","addListener","e","data","state"],"sources":["/Users/suporte/PetCare/Telas/TCCPetcare/node_modules/@react-navigation/core/lib/module/useNavigationState.tsx"],"sourcesContent":["import type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationProp } from './types';\nimport useNavigation from './useNavigation';\n\ntype Selector<ParamList extends ParamListBase, T> = (\n  state: NavigationState<ParamList>\n) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState<ParamList extends ParamListBase, T>(\n  selector: Selector<ParamList, T>\n): T {\n  const navigation = useNavigation<NavigationProp<ParamList>>();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() => selector(navigation.getState()));\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', (e) => {\n      setResult(selectorRef.current(e.data.state));\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return selector(navigation.getState());\n}\n"]},"metadata":{},"sourceType":"module"}