{"ast":null,"code":"import * as React from 'react';\nimport NavigationContext from './NavigationContext';\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\n\nexport default function useFocusEvents(_ref) {\n  let {\n    state,\n    emitter\n  } = _ref;\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef();\n  const currentFocusedKey = state.routes[state.index].key; // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n\n  React.useEffect(() => navigation === null || navigation === void 0 ? void 0 : navigation.addListener('focus', () => {\n    lastFocusedKeyRef.current = currentFocusedKey;\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey\n    });\n  }), [currentFocusedKey, emitter, navigation]);\n  React.useEffect(() => navigation === null || navigation === void 0 ? void 0 : navigation.addListener('blur', () => {\n    lastFocusedKeyRef.current = undefined;\n    emitter.emit({\n      type: 'blur',\n      target: currentFocusedKey\n    });\n  }), [currentFocusedKey, emitter, navigation]);\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n    lastFocusedKeyRef.current = currentFocusedKey; // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    } // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n\n\n    if (lastFocusedKey === currentFocusedKey || !(navigation ? navigation.isFocused() : true)) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit({\n      type: 'blur',\n      target: lastFocusedKey\n    });\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n}","map":{"version":3,"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,iBAAP,MAA8B,qBAA9B;AASA;AACA;AACA;;AACA,eAAe,SAASC,cAAT,OAGI;AAAA,MAHmD;AACpEC,SADoE;AAEpEC;AAFoE,MAGnDC;AACjB,QAAMC,UAAU,GAAGN,KAAK,CAACO,UAANP,CAAiBC,iBAAjBD,CAAnB;AACA,QAAMQ,iBAAiB,GAAGR,KAAK,CAACS,MAANT,EAA1B;AAEA,QAAMU,iBAAiB,GAAGP,KAAK,CAACQ,MAANR,CAAaA,KAAK,CAACS,KAAnBT,EAA0BU,GAApD,CAJiB,CAMjB;AACA;;AACAb,OAAK,CAACc,SAANd,CACE,MACEM,UADF,SACEA,cADF,WACEA,GADF,MACEA,aAAU,CAAES,WAAZT,CAAwB,OAAxBA,EAAiC,MAAM;AACrCE,qBAAiB,CAACQ,OAAlBR,GAA4BE,iBAA5BF;AACAJ,WAAO,CAACa,IAARb,CAAa;AAAEc,UAAI,EAAE,OAAR;AAAiBC,YAAM,EAAET;AAAzB,KAAbN;AAFF,IAFJJ,EAME,CAACU,iBAAD,EAAoBN,OAApB,EAA6BE,UAA7B,CANFN;AASAA,OAAK,CAACc,SAANd,CACE,MACEM,UADF,SACEA,cADF,WACEA,GADF,MACEA,aAAU,CAAES,WAAZT,CAAwB,MAAxBA,EAAgC,MAAM;AACpCE,qBAAiB,CAACQ,OAAlBR,GAA4BY,SAA5BZ;AACAJ,WAAO,CAACa,IAARb,CAAa;AAAEc,UAAI,EAAE,MAAR;AAAgBC,YAAM,EAAET;AAAxB,KAAbN;AAFF,IAFJJ,EAME,CAACU,iBAAD,EAAoBN,OAApB,EAA6BE,UAA7B,CANFN;AASAA,OAAK,CAACc,SAANd,CAAgB,MAAM;AACpB,UAAMqB,cAAc,GAAGb,iBAAiB,CAACQ,OAAzC;AAEAR,qBAAiB,CAACQ,OAAlBR,GAA4BE,iBAA5BF,CAHoB,CAKpB;AACA;;AACA,QAAIa,cAAc,KAAKD,SAAnBC,IAAgC,CAACf,UAArC,EAAiD;AAC/CF,aAAO,CAACa,IAARb,CAAa;AAAEc,YAAI,EAAE,OAAR;AAAiBC,cAAM,EAAET;AAAzB,OAAbN;AARkB,MAWpB;AACA;;;AACA,QACEiB,cAAc,KAAKX,iBAAnBW,IACA,EAAEf,UAAU,GAAGA,UAAU,CAACgB,SAAXhB,EAAH,GAA4B,IAAxC,CAFF,EAGE;AACA;AACD;;AAED,QAAIe,cAAc,KAAKD,SAAvB,EAAkC;AAChC;AACA;AACD;;AAEDhB,WAAO,CAACa,IAARb,CAAa;AAAEc,UAAI,EAAE,MAAR;AAAgBC,YAAM,EAAEE;AAAxB,KAAbjB;AACAA,WAAO,CAACa,IAARb,CAAa;AAAEc,UAAI,EAAE,OAAR;AAAiBC,YAAM,EAAET;AAAzB,KAAbN;AA1BF,KA2BG,CAACM,iBAAD,EAAoBN,OAApB,EAA6BE,UAA7B,CA3BHN;AA4BD","names":["React","NavigationContext","useFocusEvents","state","emitter","_ref","navigation","useContext","lastFocusedKeyRef","useRef","currentFocusedKey","routes","index","key","useEffect","addListener","current","emit","type","target","undefined","lastFocusedKey","isFocused"],"sources":["/Users/suporte/PetCare/Telas/TCCPetcare/node_modules/@react-navigation/core/lib/module/useFocusEvents.tsx"],"sourcesContent":["import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationContext from './NavigationContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  emitter: NavigationEventEmitter<EventMapCore<State>>;\n};\n\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\nexport default function useFocusEvents<State extends NavigationState>({\n  state,\n  emitter,\n}: Options<State>) {\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef<string | undefined>();\n\n  const currentFocusedKey = state.routes[state.index].key;\n\n  // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n  React.useEffect(\n    () =>\n      navigation?.addListener('focus', () => {\n        lastFocusedKeyRef.current = currentFocusedKey;\n        emitter.emit({ type: 'focus', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(\n    () =>\n      navigation?.addListener('blur', () => {\n        lastFocusedKeyRef.current = undefined;\n        emitter.emit({ type: 'blur', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({ type: 'focus', target: currentFocusedKey });\n    }\n\n    // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (\n      lastFocusedKey === currentFocusedKey ||\n      !(navigation ? navigation.isFocused() : true)\n    ) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit({ type: 'blur', target: lastFocusedKey });\n    emitter.emit({ type: 'focus', target: currentFocusedKey });\n  }, [currentFocusedKey, emitter, navigation]);\n}\n"]},"metadata":{},"sourceType":"module"}