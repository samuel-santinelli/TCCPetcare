{"ast":null,"code":"import { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport Screen from './Screen';\nimport { PrivateValueStore } from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate'; // This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\n\nPrivateValueStore;\n\nconst isValidKey = key => key === undefined || typeof key === 'string' && key !== '';\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\n\n\nconst getRouteConfigsFromChildren = (children, groupKey, groupOptions) => {\n  const configs = React.Children.toArray(children).reduce((acc, child) => {\n    var _child$type, _child$props;\n\n    if ( /*#__PURE__*/React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the screen '${child.props.name}'. It must be a non-empty string or 'undefined'.`);\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the group. It must be a non-empty string or 'undefined'.`);\n        } // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n\n\n        acc.push(...getRouteConfigsFromChildren(child.props.children, child.props.navigationKey, child.type !== Group ? groupOptions : groupOptions != null ? [...groupOptions, child.props.screenOptions] : [child.props.screenOptions]));\n        return acc;\n      }\n    }\n\n    throw new Error(`A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n    /*#__PURE__*/\n    React.isValidElement(child) ? `'${typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name}'${(_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? ` for the screen '${child.props.name}'` : ''}` : typeof child === 'object' ? JSON.stringify(child) : `'${String(child)}'`}). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`);\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(config => {\n      const {\n        name,\n        children,\n        component,\n        getComponent\n      } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(`Got an invalid name (${JSON.stringify(name)}) for the screen. It must be a non-empty string.`);\n      }\n\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(`Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`);\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(`Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`);\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(`Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`);\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(`Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`);\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(`Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`);\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(`Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`);\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(`Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`);\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(`Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`);\n          }\n        }\n      } else {\n        throw new Error(`Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`);\n      }\n    });\n  }\n\n  return configs;\n};\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\n\n\nexport default function useNavigationBuilder(createRouter, options) {\n  const navigatorKey = useRegisterNavigator();\n  const route = React.useContext(NavigationRouteContext);\n  const {\n    children,\n    screenListeners,\n    ...rest\n  } = options;\n  const {\n    current: router\n  } = React.useRef(createRouter({ ...rest,\n    ...(route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n      initialRouteName: route.params.screen\n    } : null)\n  }));\n  const routeConfigs = getRouteConfigsFromChildren(children);\n  const screens = routeConfigs.reduce((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(`A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`);\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n  const routeNames = routeConfigs.map(config => config.props.name);\n  const routeKeyList = routeNames.reduce((acc, curr) => {\n    acc[curr] = screens[curr].keys.map(key => key !== null && key !== void 0 ? key : '').join(':');\n    return acc;\n  }, {});\n  const routeParamList = routeNames.reduce((acc, curr) => {\n    const {\n      initialParams\n    } = screens[curr].props;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  const routeGetIdList = routeNames.reduce((acc, curr) => Object.assign(acc, {\n    [curr]: screens[curr].props.getId\n  }), {});\n\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n\n  const isStateValid = React.useCallback(state => state.type === undefined || state.type === router.type, [router.type]);\n  const isStateInitialized = React.useCallback(state => state !== undefined && state.stale === false && isStateValid(state), [isStateValid]);\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial\n  } = React.useContext(NavigationStateContext);\n  const stateCleanedUp = React.useRef(false);\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n  const setState = React.useCallback(state => {\n    if (stateCleanedUp.current) {\n      // State might have been already cleaned up due to unmount\n      // We do not want to expose API allowing to override this\n      // This would lead to old data preservation on main navigator unmount\n      return;\n    }\n\n    setCurrentState(state);\n  }, [setCurrentState]);\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    var _route$params4;\n\n    const initialRouteParamList = routeNames.reduce((acc, curr) => {\n      var _route$params, _route$params2, _route$params3;\n\n      const {\n        initialParams\n      } = screens[curr].props;\n      const initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n      acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? { ...initialParams,\n        ...initialParamsFromParams\n      } : undefined;\n      return acc;\n    }, {}); // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n\n    if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n      return [router.getInitialState({\n        routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList\n      }), true];\n    } else {\n      var _route$params$state, _route$params5;\n\n      return [router.getRehydratedState((_route$params$state = route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) !== null && _route$params$state !== void 0 ? _route$params$state : currentState, {\n        routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList\n      }), false];\n    } // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [currentState, router, isStateValid]);\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n  let state = // If the state isn't initialized, or stale, use the state we initialized instead\n  // The state won't update until there's a change needed in the state we have initalized locally\n  // So it'll be `undefined` or stale until the first navigation event happens\n  isStateInitialized(currentState) ? currentState : initializedState;\n  let nextState = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames) || !isRecordEqual(routeKeyList, previousRouteKeyList)) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(name => previousRouteKeyList.hasOwnProperty(name) && routeKeyList[name] !== previousRouteKeyList[name])\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n\n  if (route !== null && route !== void 0 && route.params) {\n    const previousParams = previousNestedParamsRef.current;\n    let action;\n\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    } // The update should be limited to current navigator only, so we call the router manually\n\n\n    const updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  }); // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n\n  state = nextState;\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n\n  const initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  const getState = React.useCallback(() => {\n    const currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  const emitter = useEventEmitter(e => {\n    let routeNames = [];\n    let route;\n\n    if (e.target) {\n      var _route;\n\n      route = state.routes.find(route => route.key === e.target);\n\n      if ((_route = route) !== null && _route !== void 0 && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(...Object.keys(screens).filter(name => {\n        var _route2;\n\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      }));\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n    const listeners = [].concat( // Get an array of listeners for all screens + common listeners on navigator\n    ...[screenListeners, ...routeNames.map(name => {\n      const {\n        listeners\n      } = screens[name].props;\n      return listeners;\n    })].map(listeners => {\n      const map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(type => type === e.type).map(type => map === null || map === void 0 ? void 0 : map[type]) : undefined;\n    })) // We don't want same listener to be called multiple times for same event\n    // So we remove any duplicate functions from the array\n    .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n    listeners.forEach(listener => listener === null || listener === void 0 ? void 0 : listener(e));\n  });\n  useFocusEvents({\n    state,\n    emitter\n  });\n  React.useEffect(() => {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state\n      }\n    });\n  }, [emitter, state]);\n  const {\n    listeners: childListeners,\n    addListener\n  } = useChildListeners();\n  const {\n    keyedListeners,\n    addKeyedListener\n  } = useKeyedChildListeners();\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    },\n    emitter\n  });\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState,\n    setState\n  });\n  const navigation = useNavigationHelpers({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router\n  });\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus\n  });\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState\n  });\n  const descriptors = useDescriptors({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter\n  });\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors\n  });\n  const NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation\n  });\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent\n  };\n}","map":{"version":3,"mappings":"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","names":["CommonActions","React","isValidElementType","Group","isArrayEqual","isRecordEqual","NavigationHelpersContext","NavigationRouteContext","NavigationStateContext","Screen","PrivateValueStore","useChildListeners","useComponent","useCurrentRender","useDescriptors","useEventEmitter","useFocusedListenersChildrenAdapter","useFocusEvents","useKeyedChildListeners","useNavigationHelpers","useOnAction","useOnGetState","useOnRouteFocus","useRegisterNavigator","useScheduleUpdate","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","configs","Children","toArray","reduce","acc","child","isValidElement","type","props","navigationKey","Error","JSON","stringify","name","push","keys","options","Fragment","screenOptions","_child$type","String","process","env","NODE_ENV","forEach","config","component","getComponent","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","route","useContext","screenListeners","rest","current","router","useRef","params","state","initial","screen","initialRouteName","routeConfigs","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","Object","assign","getId","length","isStateValid","useCallback","isStateInitialized","stale","currentState","getState","getCurrentState","setState","setCurrentState","setKey","getKey","getIsInitial","stateCleanedUp","cleanUpState","initializedState","isFirstStateInitialization","useMemo","initialRouteParamList","initialParamsFromParams","getInitialState","getRehydratedState","_route$params5","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","getStateForRouteNamesChange","routeKeyChanges","filter","hasOwnProperty","previousNestedParamsRef","previousParams","action","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","setTimeout","initializedStateRef","emitter","e","target","routes","find","_route","index","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","emit","data","childListeners","addListener","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","id","focusedListeners","focus","getStateListeners","defaultScreenOptions","NavigationContent","Provider","value"],"sources":["/Users/suporte/PetCare/Telas/TCCPetcare/node_modules/@react-navigation/core/lib/module/useNavigationBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n              ? [...groupOptions, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(\n        (name) =>\n          previousRouteKeyList.hasOwnProperty(name) &&\n          routeKeyList[name] !== previousRouteKeyList[name]\n      ),\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}