{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nconst TYPE_ROUTE = 'route';\nexport const TabActions = {\n  jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name,\n        params\n      }\n    };\n  }\n\n};\n\nconst getRouteHistory = (routes, index, backBehavior, initialRouteName) => {\n  const history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  let initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n\n      break;\n\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key\n        });\n      }\n\n      break;\n\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(route => route.name === initialRouteName);\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n\n      break;\n\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (state, index, backBehavior, initialRouteName) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n    history = state.history.filter(it => it.type === 'route' ? it.key !== currentKey : false).concat({\n      type: TYPE_ROUTE,\n      key: currentKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n\n  return { ...state,\n    index,\n    history\n  };\n};\n\nexport default function TabRouter(_ref) {\n  let {\n    initialRouteName,\n    backBehavior = 'firstRoute'\n  } = _ref;\n  const router = { ...BaseRouter,\n    type: 'tab',\n\n    getInitialState(_ref2) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref2;\n      const index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      const routes = routeNames.map(name => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name]\n      }));\n      const history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes\n      };\n    },\n\n    getRehydratedState(partialState, _ref3) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref3;\n\n      var _state$routes, _state$index, _state$history$filter, _state$history;\n\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map(name => {\n        const route = state.routes.find(r => r.name === name);\n        return { ...route,\n          name,\n          key: route && route.name === name && route.key ? route.key : `${name}-${nanoid()}`,\n          params: routeParamList[name] !== undefined ? { ...routeParamList[name],\n            ...(route ? route.params : undefined)\n          } : route ? route.params : undefined\n        };\n      });\n      const index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_state$index = state === null || state === void 0 ? void 0 : state.index) !== null && _state$index !== void 0 ? _state$index : 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes.length - 1);\n      const history = (_state$history$filter = (_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(it => routes.find(r => r.key === it.key))) !== null && _state$history$filter !== void 0 ? _state$history$filter : [];\n      return changeIndex({\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes\n      }, index, backBehavior, initialRouteName);\n    },\n\n    getStateForRouteNamesChange(state, _ref4) {\n      let {\n        routeNames,\n        routeParamList,\n        routeKeyChanges\n      } = _ref4;\n      const routes = routeNames.map(name => state.routes.find(r => r.name === name && !routeKeyChanges.includes(r.name)) || {\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name]\n      });\n      const index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      let history = state.history.filter( // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n      it => it.type !== 'route' || routes.find(r => r.key === it.key));\n\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n\n      return { ...state,\n        history,\n        routeNames,\n        routes,\n        index\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n\n    getStateForAction(state, action, _ref5) {\n      let {\n        routeParamList\n      } = _ref5;\n\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            let index = -1;\n\n            if (action.type === 'NAVIGATE' && action.payload.key) {\n              index = state.routes.findIndex(route => route.key === action.payload.key);\n            } else {\n              index = state.routes.findIndex(route => route.name === action.payload.name);\n            }\n\n            if (index === -1) {\n              return null;\n            }\n\n            return changeIndex({ ...state,\n              routes: state.routes.map((route, i) => {\n                if (i !== index) {\n                  return route;\n                }\n\n                let params;\n\n                if (action.type === 'NAVIGATE' && action.payload.merge) {\n                  params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? { ...routeParamList[route.name],\n                    ...route.params,\n                    ...action.payload.params\n                  } : route.params;\n                } else {\n                  params = routeParamList[route.name] !== undefined ? { ...routeParamList[route.name],\n                    ...action.payload.params\n                  } : action.payload.params;\n                }\n\n                const path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;\n                return params !== route.params || path !== route.path ? { ...route,\n                  path,\n                  params\n                } : route;\n              })\n            }, index, backBehavior, initialRouteName);\n          }\n\n        case 'GO_BACK':\n          {\n            if (state.history.length === 1) {\n              return null;\n            }\n\n            const previousKey = state.history[state.history.length - 2].key;\n            const index = state.routes.findIndex(route => route.key === previousKey);\n\n            if (index === -1) {\n              return null;\n            }\n\n            return { ...state,\n              history: state.history.slice(0, -1),\n              index\n            };\n          }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions\n  };\n  return router;\n}","map":{"version":3,"mappings":"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","names":["nanoid","BaseRouter","TYPE_ROUTE","TabActions","jumpTo","name","params","type","payload","getRouteHistory","routes","index","backBehavior","initialRouteName","history","key","initialRouteIndex","i","unshift","findIndex","route","changeIndex","state","currentKey","filter","it","concat","TabRouter","router","getInitialState","routeNames","routeParamList","undefined","includes","indexOf","map","stale","getRehydratedState","partialState","find","r","Math","min","max","_state$routes","length","_state$history","getStateForRouteNamesChange","routeKeyChanges","getStateForRouteFocus","getStateForAction","action","merge","path","previousKey","slice","shouldActionChangeFocus","actionCreators"],"sources":["/Users/suporte/PetCare/Telas/TCCPetcare/node_modules/@react-navigation/routers/lib/module/TabRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport BaseRouter from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n} from './types';\n\nexport type TabActionType = {\n  type: 'JUMP_TO';\n  payload: { name: string; params?: object };\n  source?: string;\n  target?: string;\n};\n\nexport type BackBehavior =\n  | 'initialRoute'\n  | 'firstRoute'\n  | 'history'\n  | 'order'\n  | 'none';\n\nexport type TabRouterOptions = DefaultRouterOptions & {\n  backBehavior?: BackBehavior;\n};\n\nexport type TabNavigationState<ParamList extends ParamListBase> = Omit<\n  NavigationState<ParamList>,\n  'history'\n> & {\n  /**\n   * Type of the router, in this case, it's tab.\n   */\n  type: 'tab';\n  /**\n   * List of previously visited route keys.\n   */\n  history: { type: 'route'; key: string }[];\n};\n\nexport type TabActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Jump to an existing tab.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  jumpTo<RouteName extends Extract<keyof ParamList, string>>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n};\n\nconst TYPE_ROUTE = 'route' as const;\n\nexport const TabActions = {\n  jumpTo(name: string, params?: object): TabActionType {\n    return { type: 'JUMP_TO', payload: { name, params } };\n  },\n};\n\nconst getRouteHistory = (\n  routes: Route<string>[],\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  const history = [{ type: TYPE_ROUTE, key: routes[index].key }];\n  let initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[i - 1].key });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key,\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(\n        (route) => route.name === initialRouteName\n      );\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key,\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (\n  state: TabNavigationState<ParamListBase>,\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n\n    history = state.history\n      .filter((it) => (it.type === 'route' ? it.key !== currentKey : false))\n      .concat({ type: TYPE_ROUTE, key: currentKey });\n  } else {\n    history = getRouteHistory(\n      state.routes,\n      index,\n      backBehavior,\n      initialRouteName\n    );\n  }\n\n  return {\n    ...state,\n    index,\n    history,\n  };\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'firstRoute',\n}: TabRouterOptions) {\n  const router: Router<\n    TabNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...BaseRouter,\n\n    type: 'tab',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const index =\n        initialRouteName !== undefined && routeNames.includes(initialRouteName)\n          ? routeNames.indexOf(initialRouteName)\n          : 0;\n\n      const routes = routeNames.map((name) => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name],\n      }));\n\n      const history = getRouteHistory(\n        routes,\n        index,\n        backBehavior,\n        initialRouteName\n      );\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map((name) => {\n        const route = (\n          state as PartialState<TabNavigationState<ParamListBase>>\n        ).routes.find((r) => r.name === name);\n\n        return {\n          ...route,\n          name,\n          key:\n            route && route.name === name && route.key\n              ? route.key\n              : `${name}-${nanoid()}`,\n          params:\n            routeParamList[name] !== undefined\n              ? {\n                  ...routeParamList[name],\n                  ...(route ? route.params : undefined),\n                }\n              : route\n              ? route.params\n              : undefined,\n        } as Route<string>;\n      });\n\n      const index = Math.min(\n        Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0),\n        routes.length - 1\n      );\n\n      const history =\n        state.history?.filter((it) => routes.find((r) => r.key === it.key)) ??\n        [];\n\n      return changeIndex(\n        {\n          stale: false,\n          type: 'tab',\n          key: `tab-${nanoid()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n        },\n        index,\n        backBehavior,\n        initialRouteName\n      );\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = routeNames.map(\n        (name) =>\n          state.routes.find(\n            (r) => r.name === name && !routeKeyChanges.includes(r.name)\n          ) || {\n            name,\n            key: `${name}-${nanoid()}`,\n            params: routeParamList[name],\n          }\n      );\n\n      const index = Math.max(\n        0,\n        routeNames.indexOf(state.routes[state.index].name)\n      );\n\n      let history = state.history.filter(\n        // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n        (it) => it.type !== 'route' || routes.find((r) => r.key === it.key)\n      );\n\n      if (!history.length) {\n        history = getRouteHistory(\n          routes,\n          index,\n          backBehavior,\n          initialRouteName\n        );\n      }\n\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n\n    getStateForAction(state, action, { routeParamList }) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          let index = -1;\n\n          if (action.type === 'NAVIGATE' && action.payload.key) {\n            index = state.routes.findIndex(\n              (route) => route.key === action.payload.key\n            );\n          } else {\n            index = state.routes.findIndex(\n              (route) => route.name === action.payload.name\n            );\n          }\n\n          if (index === -1) {\n            return null;\n          }\n\n          return changeIndex(\n            {\n              ...state,\n              routes: state.routes.map((route, i) => {\n                if (i !== index) {\n                  return route;\n                }\n\n                let params;\n\n                if (action.type === 'NAVIGATE' && action.payload.merge) {\n                  params =\n                    action.payload.params !== undefined ||\n                    routeParamList[route.name] !== undefined\n                      ? {\n                          ...routeParamList[route.name],\n                          ...route.params,\n                          ...action.payload.params,\n                        }\n                      : route.params;\n                } else {\n                  params =\n                    routeParamList[route.name] !== undefined\n                      ? {\n                          ...routeParamList[route.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params;\n                }\n\n                const path =\n                  action.type === 'NAVIGATE' && action.payload.path != null\n                    ? action.payload.path\n                    : route.path;\n\n                return params !== route.params || path !== route.path\n                  ? { ...route, path, params }\n                  : route;\n              }),\n            },\n            index,\n            backBehavior,\n            initialRouteName\n          );\n        }\n\n        case 'GO_BACK': {\n          if (state.history.length === 1) {\n            return null;\n          }\n\n          const previousKey = state.history[state.history.length - 2].key;\n          const index = state.routes.findIndex(\n            (route) => route.key === previousKey\n          );\n\n          if (index === -1) {\n            return null;\n          }\n\n          return {\n            ...state,\n            history: state.history.slice(0, -1),\n            index,\n          };\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"module"}