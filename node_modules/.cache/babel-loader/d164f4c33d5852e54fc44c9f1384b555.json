{"ast":null,"code":"import escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport findFocusedRoute from './findFocusedRoute';\nimport validatePathConfig from './validatePathConfig';\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\n\nexport default function getStateFromPath(path, options) {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  let initialRoutes = [];\n\n  if (options !== null && options !== void 0 && options.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: []\n    });\n  }\n\n  const screens = options === null || options === void 0 ? void 0 : options.screens;\n  let remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n  .replace(/^\\//, '') // Remove extra leading slash\n  .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n  // Make sure there is a trailing slash\n\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining.split('/').filter(Boolean).map(segment => {\n      const name = decodeURIComponent(segment);\n      return {\n        name\n      };\n    });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  } // Create a normalized configs array which will be easier to use\n\n\n  const configs = [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, [], initialRoutes, []))).sort((a, b) => {\n    // Sort config so that:\n    // - the most exhaustive ones are always at the beginning\n    // - patterns with wildcard are always at the end\n    // If 2 patterns are same, move the one with less route names up\n    // This is an error state, so it's only useful for consistent error messages\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    } // If one of the patterns starts with the other, it's more exhaustive\n    // So move it up\n\n\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n\n    const aParts = a.pattern.split('/');\n    const bParts = b.pattern.split('/');\n\n    for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n      // if b is longer, b get higher priority\n      if (aParts[i] == null) {\n        return 1;\n      } // if a is longer, a get higher priority\n\n\n      if (bParts[i] == null) {\n        return -1;\n      }\n\n      const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n      const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':'); // if both are wildcard we compare next component\n\n      if (aWildCard && bWildCard) {\n        continue;\n      } // if only a is wild card, b get higher priority\n\n\n      if (aWildCard) {\n        return 1;\n      } // if only b is wild card, a get higher priority\n\n\n      if (bWildCard) {\n        return -1;\n      }\n    }\n\n    return bParts.length - aParts.length;\n  }); // Check for duplicate patterns in the config\n\n  configs.reduce((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames; // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n\n      const intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(config => config.path === '' && config.routeNames.every( // Make sure that none of the parent configs have a non-empty path defined\n    name => {\n      var _configs$find;\n\n      return !((_configs$find = configs.find(c => c.screen === name)) !== null && _configs$find !== void 0 && _configs$find.path);\n    }));\n\n    if (match) {\n      return createNestedStateObject(path, match.routeNames.map(name => ({\n        name\n      })), initialRoutes, configs);\n    }\n\n    return undefined;\n  }\n\n  let result;\n  let current; // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n\n  const {\n    routes,\n    remainingPath\n  } = matchAgainstConfigs(remaining, configs.map(c => ({ ...c,\n    // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n    regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n  })));\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\nconst joinPaths = function () {\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n\n  return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n};\n\nconst matchAgainstConfigs = (remaining, configs) => {\n  let routes;\n  let remainingPath = remaining; // Go through all configs, and see if the next path segment matches our regex\n\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex); // If our regex matches, we need to extract params from the path\n\n    if (match) {\n      var _config$pattern;\n\n      const matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(p => p.startsWith(':')).reduce((acc, p, i) => Object.assign(acc, {\n        // The param segments appear every second item starting from 2 in the regex match result\n        [p]: match[(i + 1) * 2].replace(/\\//, '')\n      }), {});\n      routes = config.routeNames.map(name => {\n        var _config$path;\n\n        const config = configs.find(c => c.screen === name);\n        const params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(p => p.startsWith(':')).reduce((acc, p) => {\n          const value = matchedParams[p];\n\n          if (value) {\n            var _config$parse;\n\n            const key = p.replace(/^:/, '').replace(/\\?$/, '');\n            acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;\n          }\n\n          return acc;\n        }, {});\n\n        if (params && Object.keys(params).length) {\n          return {\n            name,\n            params\n          };\n        }\n\n        return {\n          name\n        };\n      });\n      remainingPath = remainingPath.replace(match[1], '');\n      break;\n    }\n  }\n\n  return {\n    routes,\n    remainingPath\n  };\n};\n\nconst createNormalizedConfigs = function (screen, routeConfig) {\n  let routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let initials = arguments.length > 3 ? arguments[3] : undefined;\n  let parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n  let parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  const configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen); // @ts-expect-error: we can't strongly typecheck this for now\n\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern; // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n\n      pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      configs.push(createConfigItem(screen, routeNames, pattern, config.path, config.parse));\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens\n        });\n      }\n\n      Object.keys(config.screens).forEach(nestedConfig => {\n        var _pattern;\n\n        const result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, [...parentScreens], (_pattern = pattern) !== null && _pattern !== void 0 ? _pattern : parentPattern);\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n  return configs;\n};\n\nconst createConfigItem = (screen, routeNames, pattern, path, parse) => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  const regex = pattern ? new RegExp(`^(${pattern.split('/').map(it => {\n    if (it.startsWith(':')) {\n      return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n    }\n\n    return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n  }).join('')})`) : undefined;\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse\n  };\n};\n\nconst findParseConfigForRoute = (routeName, flatConfig) => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n}; // Try to find an initial route connected with the one passed\n\n\nconst findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n\n  return undefined;\n}; // returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\n\n\nconst createStateObject = (initialRoute, route, isEmpty) => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, { ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    } else {\n      return {\n        routes: [{ ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (path, routes, initialRoutes, flatConfig) => {\n  let state;\n  let route = routes.shift();\n  const parentScreens = [];\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state);\n  route.path = path;\n  const params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n\n  if (params) {\n    route.params = { ...route.params,\n      ...params\n    };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (path, parseConfig) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach(name => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"mappings":"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","names":["escape","queryString","findFocusedRoute","validatePathConfig","getStateFromPath","path","options","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","configs","concat","Object","keys","key","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","i","Math","max","aWildCard","bWildCard","reduce","acc","config","intersects","every","it","Error","assign","match","find","c","screen","_configs$find","result","current","remainingPath","matchAgainstConfigs","regex","RegExp","source","joinPaths","paths","arguments","p","matchedParams","_config$pattern","params","_config$path","value","parse","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","pop","findParseConfigForRoute","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","route","isEmpty","index","state","shift","nestedState","nestedStateIndex","parseQueryParams","parseConfig","query"],"sources":["/Users/suporte/PetCare/Telas/TCCPetcare/node_modules/@react-navigation/core/lib/module/getStateFromPath.tsx"],"sourcesContent":["import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport findFocusedRoute from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configs.map((c) => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n    }))\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"]},"metadata":{},"sourceType":"module"}